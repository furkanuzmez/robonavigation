<!DOCTYPE html>
<link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js"></script>
<style>
.but{
  background-color: #0f1010;
    color: azure;   
     height: 40px;
}
.zoom {
  padding: 0px;
  background-color: white;
  transition: transform .2s; /* Animation */
 
  margin: 0 auto;
}

.zoom:hover {
  transform: scale(1.5); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
}
/* width */
::-webkit-scrollbar {
  width: 10px;
}

/* Track */
::-webkit-scrollbar-track {
  background: #f1f1f1; 
}
 
/* Handle */
::-webkit-scrollbar-thumb {
  background: #888; 
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #555; 
}
.addcoment { 

 position:absolute; 
 visibility: hidden;
 top:20%;
 left:40%;
 z-index: 10 ;
 background-color: white;
 width:max-content;
}
</style>
<html>
 
<body  onload="get_coordinates()"style="background-color:white;width:max-content;">

<div class="addcoment" id="commentbox">
 Comment  <br> <input id="name" type="text" name="name" value="" style="border:1px solid gray;width:80px;"  > <br>
 Location  <br> <input id="address" type="text" name="address" value="" style="border:1px solid gray;width:80px;"  > <br>
 INSERT  <br> <button class="btn btn-secondary btn-lg"  id="address"onclick="insertdb()">INSERTDB</button><br>
  
  
  
   </div>


  <div id="button-box" style="width:auto;position:absolute;left:5%;top:10px;height:auto;background-color: floralwhite;padding:10px;"   >
    <button class="btn btn-secondary btn-lg " onclick="commentbox()"> Comment</button>
    <button class="btn btn-secondary btn-lg " onclick="get_coordinates()"> Get_Coordinates</button>

     <button class="btn btn-secondary btn-lg" onclick="clear_points()"> Clear-Markers</button>
     <button class="btn btn-secondary btn-lg"  onclick="change()">Change Map</button>
      
      <button class="btn btn-secondary btn-lg"  onclick="clearmessages()">Clear-Messages</button>
     <button class="btn btn-secondary btn-lg"  onclick="robotstart()">Robot -start</button>
       <button class="btn btn-secondary btn-lg"  id="test" onclick="Ready()">Ready</button>
        <button class="btn btn-secondary btn-lg"  id="scalemap" onclick="scalemap()">Scalemap</button>
       
            <button class="btn btn-secondary btn-lg"  id="modeselecet" onclick="cember()">CircleMode</button>
            <button class="btn btn-secondary btn-lg"  id="modeselecet" onclick="randomode()">Random</button>
                <button class="btn btn-secondary btn-lg"  id="repeater" onclick="repeat()">Repeat</button>
                 <button class="btn btn-secondary btn-lg"  id="repeater" onclick="dbden()">database</button>
     </div>
  <div id="button-box"  style="border:1px solid greenyellow;background-color:whitesmoke;width:max-content;height:max-content;padding:2px;position: absolute;left:3px;top:60px; " >
    <div class="zoom" onclick="choseone(event)" style="border:1px solid azure;"> 
  <img src="images/pencil.png" alt="Smiley face" height="24" width="24">
   </div> 
  <div class="zoom" onclick="choseone2(event)" style="border:1px solid azure;">  
  <img src="images/marker.png" alt="Smiley face" height="24" width="24">
   </div> 
<div class="zoom" onclick="choseone3(event)" style="border:1px solid azure;"> 
  <img src="/images/bayrak.png" alt="Smiley face" height="24" width="24">
   </div> 
   <div class="zoom" onclick="choseone3(event)" style="border:1px solid azure;"> 
  <img src="/images/target.png" alt="Smiley face" height="24" width="24">
   </div> 
    </div>



<canvas   onclick="cnvs_setCoordinates(event)" id="coordiv" width="600" height="428"  style="position:absolute;top:60px;left:35px;border:1px solid #c3c3c3;z-index:5;" ></canvas>

<canvas onclick="cnvs_setCoordinates(event)" id="coordivrobo" width="600" height="428" style=" background-color:black;position:absolute;top:60px;left:640px;border:1px solid #c3c3c3" ></canvas>

<div style="border:1px solid gray;position:absolute;left:1250px;top:65px;">
             Information Display
  <div style="width:100px;background-color: white;position:absolute;left:1px;top:60px;opacity: 0.9;"> 
 W :  <input id="w-values" type="text" name="width" value="600" style="border:1px solid gray;width:80px;"   > <br>
 H :  <input id="h-values"  type="text" name="height" value="428" style="border:1px solid gray;width:80px;" > <br>

 Tyres  :  <input id="tyres"  type="text" name="tyres" value="0.8" style="border:1px solid gray;width:80px;" ><br> 
    </div>
     <div style="position:absolute;width:200px;background-color:white;left:110px;top:60px; ">
 R-Distace   <br> <input id="rdistance" type="text" name="width" value="600" style="border:1px solid gray;width:80px;">  <br>
 V-Distance  <br>  <input id="vdistance" type="text" name="width" value="600" style="border:1px solid gray;width:80px;"> <br>
 Rox         <br> <input id="rox"  type="text" name="height" value="428" style="border:1px solid gray;width:80px;" > <br>
 Roy         <br> <input id="roy"  type="text" name="tyres" value="0.8" style="border:1px solid gray;width:80px;" ><br> 
 Encoder     <br> <input id="encoder" type="text" name="encoder" value="600" style="border:1px solid gray;width:80px;"   > <br>
 Checkpoint  <br> <input id="checkpoint" type="text" name="checkpoint" value="start" style="border:1px solid gray;width:80px;"  > <br>
  NAME  <br> <input id="name" type="text" name="name" value="start" style="border:1px solid gray;width:80px;"  > <br>
   ADDRESS  <br> <input id="address" type="text" name="address" value="start" style="border:1px solid gray;width:80px;"  > <br>
   INSERT  <br> <button class="btn btn-secondary btn-lg"  id="address"onclick="insertdb()">INSERTDB</button><br>
<div id="checkdisplay" style=" font-size: 30px;text-align: center;">START 

 
</div>
  
  
  
  
   </div> 

<div id="webmap" style="background-color:black;position:fixed;top:500px;left:43%;width:25%;height:auto;z-index:5;opacity:0.9; ">
  <h6 style="color:whitesmoke;"> TurkÄ±ye</h6>
  <img  id="foto" src="images/babam.jpg" alt="Smiley face" height="200" width="200" style="left:30px;top:0px;z-index:5;">
  <input id="city"  type="text" name="height" value="428" style="border:1px solid gray;width:80px;" > <br>
   <h6 style="color:whitesmoke;">City Information</h6>
  
</div>

    </div>
<div id="xycoordinates2" style =  " background-color:black;  color:springgreen;position:absolute;top:63px;left:150px;"> </div>
<div id="div2" style="position:absolute; top:500px;left:40px;background-color:lightslategray;padding:10px;width:15%;height:200px;overflow:scroll;border:solid black 2px;" >
<p >  map messages</p>


</div>

<div id="div1" style="position:absolute; top:500px;left:350px;background-color:white;padding:10px;width:20%;height:200px;overflow:scroll;border:solid black 2px;" >
<p id="p1">  map 1 pixel  = 0,3125  m</p>
<p id="p2">  notes /* GPS scaling <br>
encoder calculations , 
motor directions, 
 </p>
<p id="demo"></p>
</div>

<script>
 // var obj = { coordinates: [] };
 var coordinates = [];
 var json;
 var c = document.getElementById("coordiv");
 var cr = document.getElementById("coordivrobo");
 var ctx = c.getContext("2d");
 var ctr = cr.getContext("2d");
 var img = new Image();
 var img2 = new Image();
 var robot = new Image();
  var signal = new Image();
  var target = new Image();
                                                                  // image sources
                                                                  img.src = "images/flag.png";
                                                                  img2.src = "images/turkey.jpg";
                                                                  robot.src = "images/robo2.png";
                                                                  signal.src = "images/check.png";
                                                                  target.src = "images/circle.png";
 var tut = 0 ;
 var i = 0;
 var stored_coordinates;
 var counter=0;
var getcor = []
 var bank = {'x':'','y':'', 'type':'','info':''};
var picsel = 1 ;
var tyre = 1;
function commentbox() { 
 document.getElementById("commentbox").style.visibility ="visible";

}
function sendmes(event) {
   var rect = c.getBoundingClientRect();
  var r = event.clientX-rect.left-4;
  var p = event.clientY-rect.top-4;
  var coor = "Coordinates: (" + r + "," + p + ")";
  
 for (f = 0 ; f <=getcor.length;f++)

  { 
       
     if(Math.sqrt((getcor[f].x-r) ** 2 + (getcor[f].y-16-p) ** 2) < 14) 
     {
 
console.log("my parker" + f ); 
     console.log("corx");
           console.log((getcor[f].x));
             console.log("r values");
           console.log(r);
              console.log("cory");
            console.log((getcor[f].y));
               console.log(" p values");
           console.log(p);
           var pic = "/images/"+getcor[f].info+".jpg";
           console.log("images name of point");
           console.log(pic);
         document.getElementById("foto").src =pic;
         document.getElementById("city").value =getcor[f].info;
         var para = document.createElement("p");
              para.style.backgroundColor = "yellow";
            var node = document.createTextNode( "marker found positon   "+ f + "****" + r +"****"+"****"+p+"****"+getcor[f].info);
              para.appendChild(node);
              var element = document.getElementById("div2");
              element.appendChild(para);  
              var webdiv =   document.getElementById("webmap");
              webdiv.style.visibility="visible";
              webdiv.style.position = "fixed";
              webdiv.style.top = "200px";
                webdiv.style.left ="100px";
              //**************
            
           break;
     }

     else { 
         var element = document.getElementById("webmap");
             element.style.visibility="hidden";
       console.log("not matched");
        console.log("corx");
           console.log((getcor[f].x));
             console.log("r values");
           console.log(r);
              console.log("cory");
            console.log((getcor[f].y));
               console.log(" p values");
           console.log(p);
          
     }
   
   

  }

}
function clearmessages()
{
   var list = document.getElementById("div2"); 
     // Get the <ul> element with id="myList"
     var c = document.getElementById("div2").children.length;
     console.log(c);
     for ( h = 1 ; h <= c; h++) {

          list.removeChild(list.childNodes[h]); 
      }
         var para = document.createElement("p");
              
            var node = document.createTextNode( "map messages");
              para.appendChild(node);
              var element = document.getElementById("div2");
              element.appendChild(para);
}
function scalemap()
{
  var w = document.getElementById("w-values").value;
  var h = document.getElementById("h-values").value;
   tyre = document.getElementById("tyres").value;
   picsel = w / 600 ;
  console.log( "w = "+ w ,"h = " + h , picsel,"tyre 2pir = " + tyre);
}
function change()
{
  img2.src ="images/2dshapes.png";
}
function cember() {
  let number = 12; // how many number to be placed
let size = 260; // size of circle i.e. w = h = 260
let cx= size/2; // center of x(in a circle)
let cy = size/2; // center of y(in a circle)
let r = size/2; // radius of a circle

for(let i=1; i<=number; i++) {
  let ang = i*(Math.PI/(number/2));
  let left = cx + (r*Math.cos(ang));
  let top = cy + (r*Math.sin(ang));
    ctr.drawImage(target,left+150,top+75);
  console.log("top: ", top, ", left: ", left);
}
}
function randomode() {

 let number = 8; // how many number to be placed
let size = 260; // size of circle i.e. w = h = 260
let cx= size/2; // center of x(in a circle)
let cy = size/2; // center of y(in a circle)
let r = size/2; // radius of a circle

for(let i=1; i<=number; i++) {
  var rastx = i*20 ;
  var rasty = Math.floor((Math.random() * 400) + 1);
 
    ctr.drawImage(target,rastx,rasty);
  console.log("top: ", rastx, ", left: ", rasty);
}
}

 function robotdirection() {
 var tekrar= setInterval(function(){
     if ( tut == 1) 
{ 
robot.src = "images/roboleft.png";
ctr.clearRect(0, 0, cr.width, cr.height);
//console.log( tut);
ctr.drawImage(robot,counter,100);
}
 if ( tut == 2 ) 
{ 
  robot.src = "images/roboright.png";
  ctr.clearRect(0, 0, cr.width, cr.height);
//  console.log( tut);
  ctr.drawImage(robot,counter,100);
}
if (tut == 3) 
{ 
   robot.src = "images/roboleft.png";
   ctr.clearRect(0, 0, cr.width, cr.height);
  // console.log( tut);
   ctr.drawImage(robot,counter,100);
}

console.log(tut);
console.log(counter);
counter= counter+1;
 if(counter == 100 )
  {
   clearInterval(tekrar);
  
  
  }

  }, 10);



 }

 function robotstart(){
   
axios.get('/coco').then(resp => {
    var k = 0 ; 
    for(k=0;k<=resp.data.length;k++){
        bank[k] = resp.data[k];
        getcor.push(bank[k]);
        console.log(getcor[k]);
         console.log(resp.data.length);
    }
    
   document.getElementById("test").style.backgroundColor ="#34eb6e";  
  
  }).catch(error => {
    console.log(error.response)
  });
     console.log(getcor[0]," point");
     console.log(getcor[1]," point");
     console.log(getcor[2]," point");
 }



function insertdb(){
var name = "'"+document.getElementById("name").value+"'";
var address= "'"+document.getElementById("address").value+"'";
axios.post('/insertdb',{
  name,
  address
}
  )
  .then(function (response) {
    console.log(response.data);
    var time = Date();
    console.log(time);
  alert("kayÄ±t tamam");
  })
  .catch(function (error) {
    console.log(error);
  });
}



 function dbden() {

axios.get('/dbden').then(resp => {
    console.log("veritabanÄ±ndan gelen bilgiler");
    
      console.log(resp.data.length);
     
for  (var y = 0 ; y <resp.data.length; y++ ) { 
  var para = document.createElement("p");
              
    var node = document.createTextNode( "name = "+resp.data[y].name+" /adrress  "+resp.data[y].address);
    para.appendChild(node);
    var element = document.getElementById("div2");
    element.appendChild(para);
    
  console.log("name = "+resp.data[y].name+" /adrress  "+resp.data[y].address);
}}).catch(error => {
    console.log(error.response)
  });
 }

 function repeat() {

  Ready();
 


 }

function Ready() {
  var repx = 0 ;  
  var xcounter = 0;
  var ycounter = 0;
  var cox;
  var coy; 
  var distance = 0 ;
  var rox =0 ;
  var roy = 0;
  var absolutexc = 0;
  var coup = 0;
  var cop ;
  var shiftx = 100;
  var shifty= 75;
  var repoint =0; 
  repoint = prompt("REPEAT MOTION");
document.getElementById("checkdisplay").innerText ="Active";
  var gogo = setInterval(function(){
      
      cox = getcor[coup+1].x - getcor[coup].x;
      coy = getcor[coup+1].y - getcor[coup].y;
     console.log('______distances____')
     console.log(getcor[coup+1].x,getcor[coup].x);
     console.log(getcor[coup+1].y,getcor[coup].y);
     console.log(cox);
     console.log(coy);
      distance   = Math.sqrt((cox*cox)+(coy*coy));
    if( distance >= absolutexc )
    { 
      
      rox = xcounter + getcor[coup].x-10;
      roy = ycounter + getcor[coup].y-10;
          if(coup == 0) {
      document.getElementById("foto").src ="/images/istanbul.jpg";
    }
    else if(coup == 1) {
      document.getElementById("foto").src ="/images/nevsehir.jpg";
    }
     else if(coup ==2) {
      document.getElementById("foto").src ="/images/mardin.jpg";
    }
       
      ctr.clearRect(0, 0, cr.width+100, cr.height+100);
       ctr.drawImage(img2,0,0);
      for(var c = 0;c<getcor.length-1;c++)
      {
      /*  ctr.beginPath();
ctr.arc(shiftx+(80*(c-2)), shifty, 25, 0, 2 * Math.PI);
ctr.stroke();
   ctr.beginPath();
ctr.arc(shiftx+(80*(c-2)), shifty+100, 25, 0, 2 * Math.PI);
ctr.stroke();
   ctr.beginPath();
ctr.arc(shiftx+(80*(c-2)), shifty+200, 25, 0, 2 * Math.PI);
ctr.stroke();
   ctr.beginPath();
ctr.arc(shiftx+(80*(c-2)), shifty+300, 25, 0, 2 * Math.PI);
ctr.stroke();*/
ctr.drawImage(target,getcor[c].x-10,getcor[c].y);
    
      }
      ctr.drawImage(robot,rox,roy);
     
      xcounter = xcounter + cox/distance;
      ycounter = ycounter + coy/distance;
     absolutexc = Math.sqrt((xcounter*xcounter)+(ycounter*ycounter));
     console.log('________ABSOLUTEXC______________');
     console.log(absolutexc);
     console.log(distance);

     var     realval  =  distance * picsel ;
     var    encoder = realval / tyre ;
       console.log("real distance = ",realval,"encoder = ",encoder,"distance = ",distance,xcounter,ycounter,rox,roy);
      
      if ( absolutexc >= distance) { 
         
      ctr.drawImage(signal,40,40);
  document.getElementById("checkpoint").value =(coup+1).toFixed(0);
    document.getElementById("checkdisplay").innerText =(coup+1).toFixed(0);
    var rnd = Math.random()*10;
  
     console.log("RANDOM");
    console.log(rnd);
      coup = coup + 1;
      xcounter = 0;
      ycounter = 0;
      absolutexc = 0;
        console.log("gogo",distance,xcounter,ycounter,rox,roy);
          if(coup == getcor.length-2 && repx < repoint) {
          coup = 0 ;
          repx++;
   
   
        }
    }
    }

        if(coup == getcor.length-2) {
          clearInterval(gogo);
        
   
   
        }
    document.getElementById("rdistance").value = realval;   
    document.getElementById("vdistance").value = distance;   
    document.getElementById("rox").value =rox;   
    document.getElementById("roy").value =roy;   
    document.getElementById("encoder").value = encoder;   
      console.log("arraylegth",getcor.length,coup+1);
   
  
},10);
  

}





function addrobot() { 

  axios.get('/coco').then(resp => {
    //console.log(resp.data);
    
    ctr.drawImage(robot,0,0);
   
     ctr.moveTo(resp.data[0].x, resp.data[0].y);
     for(i=1;i<resp.data.length;i++)
    {
       ctr.lineTo(resp.data[i].x, resp.data[i].y);
    }
            ctr.closePath();
            ctr.stroke();
           
    for(i=0;i<resp.data.length;i++)
    {
              console.log(resp.data[i]);
              get_img(resp.data[i].type);
              ctr.drawImage(img,resp.data[i].x-40,resp.data[i].y-60);
              var para = document.createElement("p");
              para.onclick = cnvs_clearCoordinates;
              var node = document.createTextNode( "Point" +i+"  "+resp.data[i].info +"  "+resp.data[i].type);
              console.log("point bilgi");
              para.appendChild(node);
              var element = document.getElementById("div1");
              element.appendChild(para);
    };
   
  }).catch(error => {
    console.log(error.response)
  });
  }



function get_img(tut){
    if(tut == 1) {
      img.src = "images/flag.png";
      }
    if(tut == 2) {
      img.src = "images/marker.png";
      }
    if(tut == 3) {
      img.src = "images/car.png";
      }
  }
  function clear_points(){
  ctx.clearRect(0, 0, c.width,c.height);
  ctx.drawImage(img2,0,0);
  console.log(c.width,c.height);
  }
  var x = document.getElementById("demo");

function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition);
  } else { 
    x.innerHTML = "Geolocation is not supported by this browser.";
  }
}
//******************************

		/*	function showDistance(lat1, long1, lat2, long2) {
				var distance = distanceInKmBetweenEarthCoordinates(lat1, long1, lat2, long2);
				var distance_mile = distance * 0.62137119224;
				var distance_nautical_miles = distance * 0.539957;
				var distance_meters = distance * 1000;
				document.getElementById('distance').innerHTML = "The distance is between the two gps coordinates is <br /><b>"+ distance.toFixed(2) +"</b> KM or <br /><b>"+distance_mile.toFixed(2)+"</b> Miles or <br /><b>"+distance_nautical_miles.toFixed(2)+"</b> Nautical miles or <br /><b>"+distance_meters.toFixed(2)+"</b> meters";
			}
function distanceInKmBetweenEarthCoordinates(lat1, lon1, lat2, lon2) {
  var p = 0.017453292519943295;    // Math.PI / 180
  var c = Math.cos;
  var a = 0.5 - c((lat2 - lat1) * p)/2 + 
          c(lat1 * p) * c(lat2 * p) * 
          (1 - c((lon2 - lon1) * p))/2;

  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
}*/



//****************************
function showPosition(position) {
  x.innerHTML = "Latitude: " + position.coords.latitude + 
  "<br>Longitude: " + position.coords.longitude;
}
function cnvs_setCoordinates(event){
  var rect = c.getBoundingClientRect();
  var x = event.clientX-rect.left-4;
  var y = event.clientY-rect.top-4;
  var coords = "X coords: " + x + ", Y coords: " + y;
  document.getElementById("xycoordinates2").innerHTML=coords;
 
  var myobj = {'x':'','y':'', 'type':'','info':''};
  myobj.x = x;
  myobj.y = y;
  myobj.type = tut;
  myobj.info =  prompt("command");
 
  coordinates.push(myobj);
  json = JSON.stringify(coordinates);
  axios.post('/test',{params:{filename:"myjsonfile"},data:json})
      .then(response => { 
          console.log(response.data)
        })
      .catch(error => {
            console.log(error.response)
        });
  i++;

  localStorage.setItem("coordinates", JSON.stringify(coordinates));

  get_img(tut);
  ctx.drawImage(img,x-8,y-21);

 }
function get_coordinates(){
  
  axios.get('/coco').then(resp => {
    //console.log(resp.data);
    ctx.drawImage(img2,0,0);
     ctx.moveTo(resp.data[0].x, resp.data[0].y);
     ctx.setLineDash([6, 8]);/*dashes are 5px and spaces are 3px*/
     ctx.strokeStyle = "cyan";
     ctx.lineWidth = 3;
     for(i=1;i<resp.data.length;i++)
    {  
       ctx.lineTo(resp.data[i].x, resp.data[i].y);
    }
            ctx.closePath();
            ctx.stroke();
           
    for(i=0;i<resp.data.length;i++)
    {
              console.log(resp.data[i]);
              get_img(resp.data[i].type);
              ctx.drawImage(img,resp.data[i].x-8,resp.data[i].y-21);
              var para = document.createElement("p");
              para.onclick = cnvs_clearCoordinates;
            var node = document.createTextNode( "Point  "    +i+"  "+resp.data[i].info +"  "+resp.data[i].type);
              para.appendChild(node);
              var element = document.getElementById("div1");
              element.appendChild(para);
    };
   
  }).catch(error => {
    console.log(error.response)
  });
  }

function addpoints(){
   stored_coordinates = JSON.parse(localStorage.getItem("coordinates"));
  for(i=0; i<stored_coordinates.length; i++)
   {
    console.log(stored_coordinates[i]);
    ctx.drawImage(get_img(stored_coordinates[i].type),stored_coordinates[i].x,stored_coordinates[i].y);
   }
 }



function cnvs_clearCoordinates()
{
console.log("out out ");
}
function choseone(){
tut = 1 ; 
console.log(tut);
}
function choseone2(){
tut = 2 ; 
console.log(tut);
}
function choseone3(){
tut = 3 ; 
console.log(tut);
}
</script>
</body>
</html>